generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  imageUrl              String   @map("image_url") @db.VarChar(1024)
  streetAddress         String   @map("street_address")
  streetAddressExtended String?  @map("street_address_extended")
  city                  String   @db.VarChar(255)
  state                 String   @db.VarChar(2)
  zipCode               String   @map("zip_code") @db.VarChar(5)
  zipCodeExtension      String?  @map("zip_code_extension") @db.VarChar(5)
  brewery               Brewery?

  @@map("addresses")
}

model Brewery {
  id          String           @id @default(uuid())
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")
  imageUrl    String           @map("image_url") @db.VarChar(1024)
  name        String           @db.VarChar(255)
  addressId   String           @unique @map("address_id")
  address     Address          @relation(fields: [addressId], references: [id])
  beers       Beer[]
  comments    BreweryComment[]
  breweryTags BreweryTag[]

  @@map("breweries")
}

model Beer {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")
  imageUrl  String        @map("image_url") @db.VarChar(1024)
  name      String        @db.VarChar(255)
  ibu       Int
  abv       Decimal
  breweryId String        @map("brewery_id")
  style     BeerStyle
  brewery   Brewery       @relation(fields: [breweryId], references: [id])
  comments  BeerComment[]
  beerTags  BeerTag[]

  @@map("beers")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  email     String   @db.VarChar(32)
  username  String   @db.VarChar
  salt      String   @db.VarChar(255)
  password  String   @db.VarChar(255)
  verified  Boolean
  role      UserRole
  profile   Profile?

  @@map("users")
}

model Profile {
  id              String           @id @default(uuid())
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  userId          String           @unique @map("user_id")
  user            User             @relation(fields: [userId], references: [id])
  beerComments    BeerComment[]
  beerTags        BeerTag[]
  breweryComments BreweryComment[]
  breweryTags     BreweryTag[]

  @@map("profiles")
}

model BeerComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  text      String   @db.VarChar(512)
  beerId    String   @map("beer_id")
  profileId String   @map("profile_id")
  beer      Beer     @relation(fields: [beerId], references: [id])
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@map("beer_comments")
}

model BreweryComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  text      String   @db.VarChar(512)
  breweryId String   @map("brewery_id")
  profileId String   @map("profile_id")
  brewery   Brewery  @relation(fields: [breweryId], references: [id])
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@map("brewery_comments")
}

model BeerTag {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  tag       ActionTag
  beerId    String    @map("beer_id")
  profileId String    @map("profile_id")
  beer      Beer      @relation(fields: [beerId], references: [id])
  profile   Profile   @relation(fields: [profileId], references: [id])

  @@map("beer_tags")
}

model BreweryTag {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  tag       ActionTag
  breweryId String    @map("beer_id")
  profileId String    @map("profile_id")
  brewery   Brewery   @relation(fields: [breweryId], references: [id])
  profile   Profile   @relation(fields: [profileId], references: [id])

  @@map("brewery_tags")
}

enum ActionTag {
  Upvote    @map("UPVOTE")
  Downvote  @map("DOWNVOTE")
  Comment   @map("COMMENT")
  Create    @map("CREATE")
  Update    @map("UPDATE")
  Remove    @map("REMOVE")

  @@map("vote_tag")
}

enum BeerStyle {
  Lager      @map("LAGER")
  PaleAle    @map("PALE_ALE")
  Ipa        @map("IPA")
  DoubleIpa  @map("DOUBLE_IPA")
  TripleIpa  @map("TRIPLE_IPA")
  AmberAle   @map("AMBER_ALE")
  Stout      @map("STOUT")

  @@map("beer_style")
}

enum UserRole {
  DrinkingBuddy  @map("DRINKING_BUDDY")
  Bartender      @map("BARTENDER")
  Brewmaster     @map("BREWMASTER")

  @@map("user_role")
}
